package main

import (
	"cube/node"
	"cube/manager"
	"cube/task"
	"fmt"
	"time"
	"os"

	"github.com/golang-collections/collections/queue"
	"github.com/google/uuid"
	"github.com/docker/docker/client"

	"cube/worker"
)

func main() {
	t := task.Task{
		ID: uuid.New(),
		Name: "Task-1",
		State: task.Pending,
		Image: "Image-1",
		Memory: 1024,
		Disk: 1,
	}

	te := task.TaskEvent{
		ID: uuid.New(),
		State: task.Pending,
		Timestamp: time.Now(),
		Task: t,
	}

	fmt.Printf("task event: %v\n", te)
	fmt.Printf("task: %v\n", t)

	w := worker.Worker{
		Name: "Worker-1",
		Queue: *queue.New(),
		Db: make(map[uuid.UUID]*task.Task),
	}
	fmt.Printf("worker: %v\n", w)

	w.CollectStats()
	w.RunTask()
	w.StartTask()
	w.StopTask()

	m := manager.Manager{
		Pending: *queue.New(),
		TaskDb: make(map[string][]*task.Task),
		EventDb: make(map[string][]*task.TaskEvent),
		Workers: []string{w.Name},
	}

	fmt.Printf("manager: %v\n", m)

	m.SelectWorker()
	m.UpdateTask()
	m.SendWork()

	n := node.Node{
		Name: "Node-1",
		IP: "192.168.1.1",
		Cores: 4,
		Memory: 1024,
		MemoryAllocated: 0,
		Disk: 10,
		DiskAllocated: 0,
		Role: "Worker",
	}

	fmt.Printf("node: %v\n", n)

	fmt.Println("Creating container...")
	dockerTask, createResult := createContainer()
	if createResult.Error != nil {
		fmt.Printf("Error creating container: %v\n", createResult.Error)
		os.Exit(1)
	}

	if createResult != nil {
		fmt.Printf("Container ID: %s\n", createResult.ContainerID)
	}

	time.Sleep(10 * time.Second)
	fmt.Printf("stopping Container... %s\n", createResult.ContainerID)
	_ = stopContainer(dockerTask, createResult.ContainerID)

}

func createContainer() (*task.Docker, *task.DockerResult) {
	c := task.Config {
		Name: "test-container-1",
		Image: "postgres:13",
		Env: []string{
			"POSTGRES_USER=cube",
			"POSTGRES_PASSWORD=secret",
		},
	}

	cli, err := client.NewClientWithOpts(client.FromEnv)
	if err != nil {
		// handle error
	}

	d := task.Docker{
		Client: cli,
		Config: c,
	}

	result := d.Run()
	if result.Error != nil {
		fmt.Printf("Error creating container: %v\n", result.Error)
		return nil, nil
	}

	fmt.Printf("Container created: %v\n", result.ContainerID)
	return &d, &result
}

func stopContainer(d *task.Docker, id string) *task.DockerResult {
	result := d.Stop(id)
	if result.Error != nil {
		fmt.Printf("Error stopping container: %v\n", result.Error)
		return nil
	}

	fmt.Printf("Container stopped: %v\n", result.ContainerID)
	return &result
}
